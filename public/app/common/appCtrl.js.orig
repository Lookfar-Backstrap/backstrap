

app.controller("appCtrl", ['$rootScope', '$scope', '$state', '$location', 'Flash','appSettings','ModalService', 'backstrap_service','$q',
function ($rootScope, $scope, $state, $location, Flash,appSettings, ModalService, backstrap_service, $q) {

    $rootScope.theme = appSettings.theme;
    $rootScope.layout = appSettings.layout;
    $rootScope.actionInProgress = false;

    var vm = this;
    vm.userData = backstrap_service.getUserInfo();
   if (vm.userData === null || vm.userData === undefined){     
       $location.path('../#/login');
        return false;
   }
   //available layouts
    vm.models = JSON.parse(localStorage.getItem("models"));
    
    //avalilable themes
    vm.themes = [
        {
            theme: "black",
            color: "skin-black",
            title: "Dark - Black Skin",
            icon:""
        },
        {
            theme: "black",
            color: "skin-black-light",
            title: "Light - Black Skin",
            icon:"-o"
        },
        {
            theme: "blue",
            color: "skin-blue",
            title: "Dark - Blue Skin",
            icon:""
        },
        {
            theme: "blue",
            color: "skin-blue-light",
            title: "Light - Blue Skin",
            icon:"-o"
        },
        {
            theme: "green",
            color: "skin-green",
            title: "Dark - Green Skin",
            icon:""
        },
        {
            theme: "green",
            color: "skin-green-light",
            title: "Light - Green Skin",
            icon:"-o"
        },
        {
            theme: "yellow",
            color: "skin-yellow",
            title: "Dark - Yellow Skin",
            icon:""
        },
        {
            theme: "yellow",
            color: "skin-yellow-light",
            title: "Light - Yellow Skin",
            icon:"-o"
        },
        {
            theme: "red",
            color: "skin-red",
            title: "Dark - Red Skin",
            icon: ""
        },
        {
            theme: "red",
            color: "skin-red-light",
            title: "Light - Red Skin",
            icon: "-o"
        },
        {
            theme: "purple",
            color: "skin-purple",
            title: "Dark - Purple Skin",
            icon: ""
        },
        {
            theme: "purple",
            color: "skin-purple-light",
            title: "Light - Purple Skin",
            icon: "-o"
        },
    ];

    


    //Main menu items of the dashboard
    vm.menuItems = [
        {
            title: "Dashboard",
            icon: "dashboard",
            state: "dashboard"
        },
        {
            title: "Models",
            icon: "gears",
            state: "modelList"
        }, 
        {
            title: "Endpoints",
            icon: "gears",
            state: "endpoints"
        },       
        {
            title: "Users",
            icon: "user",
            state: "users"
        }
    ];

    //set the theme selected
    vm.setTheme = function (value) {
        $rootScope.theme = value;
    };


    //set the Layout in normal view
    vm.setModel = function (value) { 
        if (value === 'create'){
            $state.go('app.createModel');
        }
        else if(value === 'viewModelList'){
             $state.go('app.modelList');
        }
        else{  
            localStorage.setItem("selectedModel", JSON.stringify(value));      
            $state.go('app.modelDetail');
            var url = $location.path();
           
            var ix = url.indexOf("/model");
            var toRemove = url.substring(0, ix + 1);
            var area = url.replace(toRemove, '');          
        
            if (area === 'model'){
                $state.reload();
            }
        }
    };


    //controll sidebar open & close in mobile and normal view
    vm.sideBar = function (value) {
        if($(window).width()<=767){
        if ($("body").hasClass('sidebar-open'))
            $("body").removeClass('sidebar-open');
        else
            $("body").addClass('sidebar-open');
        }
        else {
            if(value==1){
            if ($("body").hasClass('sidebar-collapse'))
                $("body").removeClass('sidebar-collapse');
            else
                $("body").addClass('sidebar-collapse');
            }
        }
    };

    vm.createModel = function(){
        ModalService.showModal({
            templateUrl: '../../app/modules/dashboard/views/model.html',
            controller: "ModelController",
            inputs: {
                title: 'create',               
            }
            }).then(function(modal) {
                modal.element.modal();
                modal.close.then(function(result) {                 
                    if (result.doSave){
                        var deferred = $q.defer();
                        $rootScope.actionInProgress = true;   
                        $rootScope.checkForModelFile().then(function(success){       
                        var url = $location.path();
                    
                        var ix = url.indexOf("/model");
                        var toRemove = url.substring(0, ix + 1);
                        var area = url.replace(toRemove, '');
                        var file_object = { 
                            file_object: { 
                                type: 'models',
                                data: result.models 
                            }
                        };                       
                        backstrap_service.postFile(file_object)    
                        .then(function(response){
                            backstrap_service.getModels();
                            $rootScope.actionInProgress = false;   
                            deferred.resolve(response);
                            Flash.create('success', 'Entity Created', 'large-text');
                            $state.go('app.modelDetail');
                        });  
                    });
                }
            });
        });
    }
    //navigate to search page
    vm.search = function () {
        $state.go('app.search');
    };

   
    $rootScope.modelFileUId = 0;    
    //define function for root scope
    $rootScope.checkForSystemFiles = function(fileName){        
        var deferred = $q.defer();
        var token = backstrap_service.getApiToken();
        if (token !== null && token !== undefined && token !== ''){

            backstrap_service.getModels($rootScope.modelFileUid).then(
            function(response) {
                if(response !== null && response.available && response.models !== null) {
                    var models = backstrap_service.getLocalModels();
                    modelFileUid = response.uid;
                    selectedModel = backstrap_service.getSelectedModel();
                    if (selectedModel !== null){
                        models.forEach(function(model){
                            if (model.obj_type === selectedModel.obj_type){
                                backstrap_service.setSelectedModel(model); 
                                deferred.resolve({'success': true});
                            }
                        });
                        var url = $location.path();                    
                        var ixModel = url.indexOf("model");
                        var ixInsert = url.indexOf("insert");
                        var ixData = url.indexOf("data");
                        //we only need to refresh if user is looking at one of these screens
                        if(ixModel > -1 || ixInsert > -1 || ixData != -1){
                            console.log(ixModel + ', ' + ixInsert + ', ' + ixData + ', reloading...');
                            $state.reload();
                        }                        
                    }     
                    deferred.resolve({'success': true}); 
                }
                else {
                    deferred.resolve({'success': false});
                }
            },
            function(err) {
                deferred.reject(err);
            });
        }
        return deferred.promise;
    }
    //set the prev function on a timer
    var fetchModelFileTimer = setInterval(internalCheckForSystemFiles, 240000);
    function internalCheckForSystemFiles(){
         //if there is an post action happening, we don't want to overwrite 
         //because the post action will also get the most recent file  
        if (!$rootScope.actionInProgress){           
            $rootScope.checkForModelFile();
        }
    }
}]);
